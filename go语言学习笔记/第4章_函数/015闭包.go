package 第四章_函数

import "fmt"

func testClosure(x int) func(in int) {
	fmt.Println(&x)
	a := 56349
	return func(in int) {
		fmt.Println(&x, x)
		if in == 6 {
			fmt.Println(a)
		}
	}
}

func main() {
	f := testClosure(0x100)
	f(6)
}

//闭包实际上不仅仅包含了匿名函数，而且还包含了匿名函数的上下文变量。
//当外界使用匿名函数时，也可以通过匿名函数去访问这些上下文变量。
//猜测具体的实现方式应该是返回的匿名函数中包含了所有上下文变量的地址。

//经查，闭包返回了一个funcval结构，其中包含了匿名函数和环境变量的地址
//闭包通过指针引用环境变量，会导致其声明周期延长、甚至被分配道堆内存，还有所谓的"延迟求值"的特性_go语言学习笔记（雨痕）
//若在同一个地方创建多个匿名函数，他们会引用同一套环境变量，如果其中一个匿名函数修改了这个环境变量则会对其他匿名函数造成麻烦。

//闭包对于性能要求较高的场合，须慎重使用。
