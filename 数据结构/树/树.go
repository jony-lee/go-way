package main

//树的定义
//1、根节点唯一
//2、子节点之间互不相交

//节点拥有子树的数量称为节点的度
//节点从根开始计算层数，根节点为第一层

//树中结点的最大层次称为树的深度或高度（有多少层）

//如果讲树中结点的各子树看成从左到右是有次序的，不能互换的，则称该树为有序树，否则称为无序树

//ADT
type treer interface {
	Init()         //构造空树
	Creat()        //按定义给出创建树
	Clear()        //若树存在，则清空树
	IsEmpty()      //若为空树返回true，否则返回false
	Depth()        //返回树的深度
	Root()         //返回树的根结点
	Value()        //返回结点的值
	Assign()       //给结点赋值
	Parent()       //返回当前结点的父节点
	LeftChild()    //返回左孩子，若无则返回nil
	RightSibling() //若有右兄弟，则返回右兄弟
	InsertChild()  //插入
	DeleteChild()  //
}

/*
存储结构的设计是一个非常灵活的过程。一个存储结构设计的是否合理，
取决于基于该存储结构的运算是否合适、是否方便、时间复杂度好不好等。

二叉树是n个结点的有限集合，该集合或者为空集，或者由一个根节点和两颗互不相交的、分别称为根节点的左子树和右子树的二叉树组成。

二叉树的特点
每个结点最多两个子树
左子树和右子树有区别

二叉树的五种形态
1、空二叉树
2、只有一个根节点
3、根节点只有左子树
4、根节点只有右子树
5、根节点既有左子树又有右子树

特殊二叉树
斜树————所有结点都只有左子树或者右子树。
满二叉树————所有的分支结点都有左子树和右子树，并且所有的叶子都在同一层上。
完全二叉树————编号为i的结点与满二叉树编号为i的结点位置完全相同。
完全二叉树的特点
1、叶子结点只能出现在最下两层
2、最下层的叶子一定击中在左部连续位置。
3、倒数二层，若有叶子结点、一定都在右部连续位置
4、如果结点度为1，则该结点只存在左孩子而不存在右孩子
5、同样结点的二叉树，完全二叉树的深度最小。

二叉树的性质
1、在二叉树的第i层上至多右2^(i-1)个结点。i=1，只有根节点1个
2、深度为k的二叉树至多有2^k-1个结点，就是把所有层的结点加起来
3、对任意一颗二叉树T，如果其终端结点数位n0，度为2的结点数为n2，则n0=n2+1
4、具有n个结点的完全二叉树的深度为log2(n)+1
5、



*/
